lua-debug                                       *lua-debug*

lua-debug.nvim is an adapter for lua running inside Neovim. It
will allow you to:

  * Debug lua scripts
  * Debug a running component inside Neovim (like a plug-in)
  * Debug Neovim internal lua scripts

In order to use lua-debug.nvim, you will need a DAP client.
You can choose between two alternatives which are:

  nvim-dap: https://github.com/mfussenegger/nvim-dap
  vimspector: https://github.com/puremourning/vimspector

lua-debug.nvim was mainly developed with nvim-dap which
is the one recommanded.

The general idea is to control remotely an instance from a
DAP client. The adapter is launched on the target instance,
and the debug instance will use the DAP client to communicate
with the target instance.

The remote controlled instance will be completely frozen
when a breakpoint is hit. So be careful to always to use 
correctly the debugging environment.

                                  Type |gO| to the table of contents.

==============================================================================
nvim-dap                                               *lua-debug-dap*

nvim-dap has the concepts of configurations and adapters. The configuration
has the form dap.configuration.<language> where the language is lua for
lua-plugins.nvim. Furthermore, you need to specify, it's an "attach" under
the request field. The host and port field will allow to pass the server
address to nvim-dap. >

  local dap = require"dap"
  dap.configurations.lua = { 
    { 
      type = 'nlua', 
      request = 'attach',
      name = "Attach to running Neovim instance",
      host = function()
        local value = vim.fn.input('Host [127.0.0.1]: ')
        if value ~= "" then
          return value
        end
        return '127.0.0.1'
      end,
      port = function()
        local val = tonumber(vim.fn.input('Port: '))
        assert(val, "Please provide a port number")
        return val
      end,
    }
  }

  dap.adapters.nlua = function(callback, config)
    callback({ type = 'server', host = config.host, port = config.port })
  end
<

Once the |lua-debug-server| has been launched, nvim-dap can be attached
to the Neovim instance. The usual procedure is:

  * Toggle breakpoints using |dap.toggle_breakpoint()|.
  * Start the debugging session using |dap.continue()|.
  * Open the REPL using |dap.repl.open()|.

==============================================================================
vimspector configuration                           *lua-debug-vimspector*

Todo

==============================================================================
Launch lua-debug's server                          *lua-debug-server*

To start a debugging session, you will first need to launch the server. This
can done using |lua-debug.launch()|.  

launch({opts})                             *lua-debug.launch()*

This command will launch the DAP server awaiting any connections. On
execution, a prompt message will display the port it's running on.

    Parameters:~
        {opts} Optional parameters.
               • `host`: defaults to "127.0.0.1"
               • `port`: Specify a port number or if nil, lets the server
               choose an available port.

    Return:~
        An server info object which contains {host = {host}, port = {port}} or
        nil on failure

==============================================================================
lua-debug development                              *lua-debug-development*

Most of the development and testing is done through `src/test.lua.tl`. It 
allows to start a debug session automatically. Otherwise the time of
development would be much longer. It also provides a script which test most of
the functionalities of lua-debug. In order to be run, you will at least need
the ntangle.nvim plugin available at:

    https://github.com/jbyuki/ntangle.nvim

This plug-in should be enough to generate the lua file which can be run.
Additionally, dash.nvim is used to quickly run the lua file from within the
tangle file.

    https://github.com/jbyuki/dash.nvim

==============================================================================
lua-debug evaluation                               *lua-debug-evaluation*

The REPL supports evaluation of expression. It will prepend a "return "
statement which will return the value of the expression to the debugger. This
means expression such as assignements will not be valid syntax.
